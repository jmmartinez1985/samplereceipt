
sudo snap alias microk8s.kubectl kubectl


ACCESS IE
sudo iptables -P FORWARD ACCEPT
sudo apt-get install iptables-persistent -y


microk8s enable hostpath-storage dns community metrics-server helm3 dashboard

microk8s enable helm3


RABBIT MQ

https://github.com/bitnami/charts/tree/master/bitnami/rabbitmq/#installing-the-chart

microk8s helm3 repo add bitnami https://charts.bitnami.com/bitnami


microk8s helm3 install rabbitmq oci://registry-1.docker.io/bitnamicharts/rabbitmq \
    --set replicaCount=2 

microk8s helm3 install rabbitmq oci://registry-1.docker.io/bitnamicharts/rabbitmq \
--set replicaCount=2 \
--set communityPlugins="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/download/3.11.1/rabbitmq_delayed_message_exchange-3.11.1.ez"

microk8s helm3 install rabbitmq oci://registry-1.docker.io/bitnamicharts/rabbitmq  \
--set replicaCount=2 \
--set communityPlugins="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/download/v3.12.0/rabbitmq_delayed_message_exchange-3.12.0.ez"


microk8s helm3 install rabbitmq oci://registry-1.docker.io/bitnamicharts/rabbitmq --version=11.15.3 \
--set replicaCount=2 \
--set communityPlugins="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/download/3.11.1/rabbitmq_delayed_message_exchange-3.11.1.ez" \
--set extraPlugins="rabbitmq-delayed-message-exchange"



FIX PARA TIMEOUT RABBIT
microk8s helm3 install rabbitmq oci://registry-1.docker.io/bitnamicharts/rabbitmq  \
--set replicaCount=2,livenessProbe.enabled=false,readinessProbe.enabled=false,resourcesPreset=medium \
--set communityPlugins="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/download/v3.13.0/rabbitmq_delayed_message_exchange-3.13.0.ez"




https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/download/v3.12.0/rabbitmq_delayed_message_exchange-3.12.0.ez

rabbitmq-plugins list

kubectl exec --stdin --tty rabbitmq-0  -- /bin/sh
kubectl exec --stdin --tty rabbitmq-1  -- /bin/sh

rabbitmq-plugins enable rabbitmq_delayed_message_exchange


microk8s helm3 remove rabbitmq



	

kubectl get secret --namespace default rabbitmq -o jsonpath="{.data}"
echo "Password      : $(microk8s kubectl get secret --namespace default rabbitmq -o jsonpath="{.data.rabbitmq-password}" | base64 --decode)"


MYSQL

microk8s helm3 install mysql bitnami/mysql --version 9.10.1 --set architecture=replication --set primary.persistence.size=8Gi --set secondary.persistence.size=8Gi

microk8s helm3 install mysql bitnami/mysql --version 9.10.1 \
	--set architecture=replication \
	--set primary.persistence.size=8Gi \
	--set secondary.persistence.size=8Gi

microk8s helm3 install mysql oci://registry-1.docker.io/bitnamicharts/mysql \
	--set architecture=replication \
	--set primary.persistence.size=50Gi \
	--set secondary.persistence.size=50Gi


	
microk8s helm3 install mysql bitnami/mysql \
	--set architecture=replication  \
	--set primary.persistence.size=8Gi \
	--set secondary.persistence.size=8Gi

	
CLIENTE MYSQL

echo Username: root
  MYSQL_ROOT_PASSWORD=$(kubectl get secret --namespace default mysql -o jsonpath="{.data.mysql-root-password}" | base64 -d)

kubectl run mysql-client --rm --tty -i --restart='Never' --image  docker.io/bitnami/mysql:8.0.33-debian-11-r3 --namespace default --env MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD --command -- bash

mysql -h mysql-primary.default.svc.cluster.local -uroot -p"$MYSQL_ROOT_PASSWORD"

mysql -h mysql-secondary.default.svc.cluster.local -uroot -p"$MYSQL_ROOT_PASSWORD"

kubectl exec mysql-primary-0 -- mysqldump  -uroot -p"$MYSQL_ROOT_PASSWORD" db_name -p > db_name_dump_primary.sql > ./db_name_dump_primary.sql

kubectl exec --stdin --tty mysql-primary-0 -- bash

mysqldump -u root db_control_fe -p > db_control_fe_dump.sql



kubectl port-forward --namespace default svc/mysql-primary 3306:3306
kubectl port-forward --namespace default svc/rabbitmq 15672:15672



microk8s helm3 install phpmyadmin bitnami/phpmyadmin

kubectl port-forward --namespace default svc/phpmyadmin 80:80
kubectl port-forward --namespace default svc/echoserver 8082:80

microk8s helm3 delete helm-name 
	
Destroy everything

microk8s kubectl delete all --all
microk8s kubectl delete all --all -n rabbitmq-system

METALLB
microk8s enable metallb

QA
192.168.111.35-192.168.111.36,192.168.111.45-192.168.111.45
PR
192.168.111.43-192.168.111.44,192.168.111.46-192.168.111.46



NGINX CONTROLLER

microk8s helm3 install nginx oci://registry-1.docker.io/bitnamicharts/nginx-ingress-controller
microk8s helm3 delete nginx oci://registry-1.docker.io/bitnamicharts/nginx-ingress-controller



MONGODB
microk8s helm3 install mongodb oci://registry-1.docker.io/bitnamicharts/mongodb --set replicaCount=2 --set architecture="replicaset" --set persistence.size="50Gi" --set auth.enabled="false"

microk8s helm3 install my-mongo oci://registry-1.docker.io/bitnamicharts/mongodb


microk8s helm3 install mongodbsample oci://registry-1.docker.io/bitnamicharts/mongodb --version 14.4.0 \
--set replicaCount=2 --set architecture="replicaset" --set persistence.size="8Gi" --set auth.enabled="false"

kubectl run --namespace default mongodb-client --rm --tty -i --restart='Never' --env="MONGODB_ROOT_PASSWORD=$MONGODB_ROOT_PASSWORD" --image docker.io/bitnami/mongodb:7.0.4-debian-11-r0 --command -- bash

mongosh feintermedia --host "mongodb-0.mongodb-headless.default.svc.cluster.local:27017,mongodb-1.mongodb-headless.default.svc.cluster.local:27017"




MongoDB&reg; can be accessed on the following DNS name(s) and ports from within your cluster:

    mongodb-0.mongodb-headless.default.svc.cluster.local:27017
    mongodb-1.mongodb-headless.default.svc.cluster.local:27017

To connect to your database, create a MongoDB&reg; client container:

    kubectl run --namespace default mongodb-client --rm --tty -i --restart='Never' --env="MONGODB_ROOT_PASSWORD=$MONGODB_ROOT_PASSWORD" --image docker.io/bitnami/mongodb:7.0.14-debian-12-r0 --command -- bash

Then, run the following command:
    mongosh admin --host "mongodb-0.mongodb-headless.default.svc.cluster.local:27017,mongodb-1.mongodb-headless.default.svc.cluster.local:27017"



INDICES MONGO

db.bitacora.find().sort({_id:1});
db.bitacora.createIndex({key:1})
db.bitacora.dropIndex({key:1})



METRICS SERVER
microk8s enable metrics-server
microk8s enable prometheus
	user/pass: admin/admin
	
Sample Metrics 
#Get CPU and Memory current usage of all Nodes
kubectl top nodes
#Get CPU and Memory Requests and Limits for Nodes
kubectl describe nodes
OR
kubectl describe nodes | grep 'Name:\|  cpu\|  memory'	
#Get CPU and Memory current usage of pods in all Namespaces
kubectl top pods --all-namespaces
#Get CPU and Memory current usage of containers running in pods in all Namespaces
kubectl top pods --all-namespaces --containers=true
#Sort (descending order) current CPU usage of pods in all Namespaces 
kubectl top pods --all-namespaces | sort --key 2 -b | awk 'NR<2{print $0;next}{print $0| "sort --key 3 --numeric -b --reverse"}'
#Sort (descending order) current Memory usage of pods in all Namespaces 
kubectl top pods --all-namespaces | sort --key 2 -b | awk 'NR<2{print $0;next}{print $0| "sort --key 4 --numeric -b --reverse"}'
#Sort (descending order) current CPU usage of containers in pods in all Namespaces 
kubectl top pods --all-namespaces --containers=true | sort --key 4 -b | awk 'NR<1{print $0;next}{print $0| "sort --key 4 --numeric -b --reverse"}'
#Sort (descending order) current Memory usage of containers in pods in all Namespaces 
kubectl top pods --all-namespaces --containers=true | sort --key 5 -b | awk 'NR<1{print $0;next}{print $0| "sort --key 5 --numeric -b --reverse"}'


NFS

sudo apt install nfs-kernel-server
sudo mkdir /var/nfs/general -p
ls -la /var/nfs/general
sudo chown nobody:nogroup /var/nfs/general
sudo nano /etc/exports
        /var/nfs/general     *(rw,sync,no_subtree_check,insecure)
        /home                *(rw,sync,no_root_squash,no_subtree_check)
sudo exportfs -rav
sudo exportfs -v
showmount -e
sudo systemctl restart nfs-kernel-server
sudo systemctl status nfs-kernel-server

helm
microk8s helm3 repo add nfs-subdir-external-provisioner https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner/
microk8s helm3 install nfs-subdir-external-provisioner nfs-subdir-external-provisioner/nfs-subdir-external-provisioner \
    --set nfs.server=192.168.1.107 \
    --set nfs.path=/var/nfs/general \
    --set meta.helm.sh/release-namespace=default


CLIENT
sudo apt update
sudo apt-get install nfs-common -y
sudo mkdir -p /nfs/general
sudo mkdir -p /nfs/home
sudo mount 192.168.111.48:/var/nfs/general /nfs/general
sudo mount 192.168.111.48:/home /nfs/home
df -h
du -sh /nfs/home
du -sh /nfs/general

mount | grep general
mount | grep general/xml
umount /mnt
sudo touch /var/nfs/general/general.test

sudo nano /etc/fstab
192.168.111.48:/var/nfs/general    /nfs/general   nfs auto,nofail,noatime,nolock,intr,tcp,actimeo=1800 0 0
192.168.111.48:/home               /nfs/home      nfs auto,nofail,noatime,nolock,intr,tcp,actimeo=1800 0 0



ELASTIC
microk8s helm3 install elastic \
  --set global.kibanaEnabled=true,name=elasticsearch \
  --set master.masterOnly=true,master.replicaCount=1 \
  --set data.replicaCount=1 \
  --set ingest.replicaCount=0,coordinating.replicaCount=0 \
  bitnami/elasticsearch
microk8s helm3 delete elastic
  
kubectl port-forward --namespace default svc/elastic-elasticsearch 9200:9200  
kubectl port-forward --namespace default svc/elastic-kibana 5601:5601
kubectl port-forward --namespace prometheus svc/prometheus-server 80:80
kubectl port-forward --namespace default svc/grafana 8080:3000

microk8s helm3 install grafana bitnami/grafana
microk8s helm3 delete grafana 

kubectl get hpa fe-crud --watch
kubectl get hpa fe-crud -o yaml


kubectl -n default exec mysql-primary-0 -- df -ah
kubectl exec -it mysql-primary-0 -- bin/bash


MB
SELECT (data_length+index_length)/power(1024,2) tablesize_mb
FROM information_schema.tables
WHERE table_schema='db_control_fe' and table_name='invoice';

KB
SELECT (data_length+index_length)/power(1024,1) tablesize_kb
FROM information_schema.tables
WHERE table_schema='db_control_fe' and table_name='invoice';

GB 
SELECT (data_length+index_length)/power(1024,3) tablesize_gb
FROM information_schema.tables
WHERE table_schema='db_control_fe' and table_name='invoice';

SELECT
  TABLE_NAME AS `Table`,
  ROUND((DATA_LENGTH + INDEX_LENGTH) / 1024 / 1024) AS `Size (MB)`
FROM
  information_schema.TABLES
WHERE
  TABLE_SCHEMA = "db_control_fe"
ORDER BY
  (DATA_LENGTH + INDEX_LENGTH)
DESC;


echo Username: root
MYSQL_ROOT_PASSWORD=$(kubectl get secret --namespace default mysql -o jsonpath="{.data.mysql-root-password}" | base64 -d)

kubectl exec mysql-primary-0 -- mysqldump -u root -p"$MYSQL_ROOT_PASSWORD" db_control_fe > dumpfeyuli.sql
kubectl exec mysql-secondary-0 -- mysqldump -u root -p"$MYSQL_ROOT_PASSWORD" db_control_fe > dumpfesec.sql


kubectl exec -it mysql-primary-0 -- mysql -u root -p"$MYSQL_ROOT_PASSWORD" db_control_fe < dumpfeyuli.sql

kubectl exec -it mysql-primary-0 -- mysql -u root -p"$MYSQL_ROOT_PASSWORD" db_control_fe < mysql-secondary-0_db_control_fe.sql


NFS

kubectl apply -f 1-pvc-nfs.yaml -f 2-pv-nfs.yaml


APPS

kubectl apply -f smrey-deployment-api-ingest.yaml -f smrey-deployment-ms-electronic-invoice.yaml -f smrey-deployment-ms-mq-listener-db.yaml -f smrey-deployment-ms-mq-listener.yaml -f smrey-deployment-ms-mq-publisher.yaml -f smrey-deployment-mysql-crud.yaml -f smrey-deployment-qr-crud_v2.yaml

kubectl delete -f smrey-deployment-api-ingest.yaml -f smrey-deployment-ms-electronic-invoice.yaml -f smrey-deployment-ms-mq-listener-db.yaml -f smrey-deployment-ms-mq-listener.yaml -f smrey-deployment-ms-mq-publisher.yaml -f smrey-deployment-mysql-crud.yaml -f smrey-deployment-qr-crud_v2.yaml

SVC

kubectl apply -f smrey-service-api-ingest.yaml -f smrey-service-electronic-invoice.yaml -f smrey-service-qr-crud.yaml -f smrey-service-ms-mq-publisher.yaml -f smrey-service-mysql-crud.yaml

kubectl delete -f smrey-service-api-ingest.yaml -f smrey-service-electronic-invoice.yaml -f smrey-service-qr-crud.yaml -f smrey-service-ms-mq-publisher.yaml -f smrey-service-mysql-crud.yaml

HPA

kubectl apply -f smrey-hpa-api-ingest.yaml -f smrey-hpa-ms-electronic-invoice.yaml -f smrey-hpa-ms-mq-listener-db.yaml -f smrey-hpa-ms-mq-listener.yaml -f smrey-hpa-ms-mq-publisher.yaml -f smrey-hpa-mysql-crud.yaml -f smrey-hpa-qr-crud.yaml

kubectl delete -f smrey-hpa-api-ingest.yaml -f smrey-hpa-ms-electronic-invoice.yaml -f smrey-hpa-ms-mq-listener-db.yaml -f smrey-hpa-ms-mq-listener.yaml -f smrey-hpa-ms-mq-publisher.yaml -f smrey-hpa-mysql-crud.yaml -f smrey-hpa-qr-crud.yaml





Upgrade Cluster

MAIN
microk8s kubectl drain slave-2 --ignore-daemonsets --delete-emptydir-data
microk8s kubectl drain master-node --ignore-daemonsets --delete-emptydir-data
slave-2
microk8s kubectl uncordon slave-2
microk8s kubectl uncordon slave-1
microk8s kubectl uncordon master-node
microk8s kubectl get node

SLAVE
sudo snap refresh microk8s --channel 1.26/stable






kubectl delete -f smrey-deployment-mysql-crud.yaml -f smrey-deployment-api-ingest.yaml -f smrey-deployment-ms-mq-listener-db.yaml -f smrey-deployment-ms-mq-publisher.yaml -f smrey-deployment-ms-mq-listener.yaml 

kubectl apply -f smrey-deployment-mysql-crud.yaml -f smrey-deployment-api-ingest.yaml -f smrey-deployment-ms-mq-listener-db.yaml -f smrey-deployment-ms-mq-publisher.yaml  


microk8s helm3 install rabbitmq oci://registry-1.docker.io/bitnamicharts/rabbitmq --version 14.6.8
